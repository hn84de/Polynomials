#include <vector>
#include <iostream>
#include <cmath>
#include <string>
#include <random>
//Method declarations
std::vector<std::vector<double>> multiplyMatrices(std::vector<std::vector<double>> a, std::vector<std::vector<double>> b);
std::vector<std::vector<double>> randomMatrix(int rows, int cols);
std::vector<std::vector<double>> randomMatrix(int all);
void print(std::string str);
void print(double a);
void ln();
void ln(int n);
void println(std::string str);
void print(std::string str);
void println(double a);
void print(double a);
void printMatrix(std::vector<std::vector<double>> a);
void print(std::vector<std::vector<double>> a);
std::vector<std::vector<double>> remRC(std::vector<std::vector<double>> mat, int row, int col);
double det(std::vector<std::vector<double>> mat);
std::vector<std::vector<double>> tpos(std::vector<std::vector<double>> mat);
std::vector<std::vector<double>> inv(std::vector<std::vector<double>> mat);
double rnddbl(double a, double b);
std::vector<std::vector<double>> pts(int num);
std::vector<std::vector<double>> polyn(std::vector<std::vector<double>> ptos);
std::vector<double> solve(std::vector<std::vector<double>> ptos);
void printMatrix(std::vector<double> matrix);
void print(std::vector<double> a);
void printPts(std::vector<std::vector<double>> ptos);
void printRes(std::vector<std::vector<double>> ptos);
void printResAlt(std::vector<std::vector<double>> ptos);
//Main method
int main(){
    ln(2);
    std::vector<std::vector<double>> a = pts(6);
    printResAlt(a);
    while(abs(solve(a)[5])<0.00000001){
        ln(8);
        a = pts(6);
        printResAlt(a);
    }
    return 0;
}
//Other methods

void printResAlt(std::vector<std::vector<double>> ptos){
    print("a=[");
    int n = ptos.size();
    std::vector<double> sol = solve(ptos);
    print("(");
    print(ptos[0][0]);
    print(", ");
    print(ptos[0][1]);
    print(")");
    for(int i = 1; i<n; i++){
        print(", (");
        print(ptos[i][0]);
        print(", ");
        print(ptos[i][1]);
        print(")");
    }
    for(int i = 0; i<n; i++){
        print(", (");
        print(sol[i]);
        print(", 99999)");
    }
    print("]");
}

void printRes(std::vector<std::vector<double>> ptos){
    int n = ptos.size();
    std::vector<double> sol = solve(ptos);
    for(int i = 0; i<n; i++){
        print("(");
        print(sol[i]);
        for(int j = 0; j<i; j++){
            print("*x");
        }
        print(")+");
    }
    print("0");
}

void printPts(std::vector<std::vector<double>> ptos){
    int n = ptos.size();
    print("(");
    print(ptos[0][0]);
    print(",");
    print(ptos[0][1]);
    print(")");
    for(int i = 1; i<n; i++){
        print(", (");
        print(ptos[i][0]);
        print(",");
        print(ptos[i][1]);
        print(")");
    }
}

void printMatrix(std::vector<double> matrix){
    std::vector<std::vector<double>> matrix2;
    int n = matrix.size();
    matrix2.resize(n);
    for(int i = 0; i<n; i++){
        matrix2[i].resize(1);
        matrix2[i][0] = matrix[i];
    }
    printMatrix(matrix2);
}

std::vector<double> solve(std::vector<std::vector<double>> ptos){
    int n = ptos.size();
    std::vector<std::vector<double>> ans;
    ans.resize(n);
    for(int i = 0; i<n; i++){
        ans[i].resize(n);
        for(int j = 0; j<n; j++){
            ans[i][j] = 0.0;
        }
    }
    for(int i = 0; i<n; i++){
        ans[i][0] = ptos[i][1];
    }
    std::vector<std::vector<double>> r1;
    r1.resize(n);
    for(int i = 0; i<n; i++){
        r1[i].resize(n);
        for(int j = 0; j<n; j++){
            r1[i][j] = pow(ptos[i][0], j);
        }
    }
    return tpos(multiplyMatrices(inv(r1), ans))[0];
}

std::vector<std::vector<double>> polyn(std::vector<std::vector<double>> ptos){
    std::vector<std::vector<double>> es;
    int n = ptos.size();
    es.resize(n);
    for(int i = 0; i<n; i++){
        es[i].resize(n+1);
        for(int j = 0; j<n; j++){
            es[i][j] = pow(ptos[i][0], j);
        }
        es[i][n] = ptos[i][1];
    }
    return es;
}

std::vector<std::vector<double>> pts(int num){
    std::vector<std::vector<double>> res;
    res.resize(num);
    for(int i=0; i<num; i++){
        res[i].resize(2);
        res[i][0] = trunc(rnddbl(-2000.0, 2000.0));
        res[i][1] = trunc(rnddbl(-2000.0, 2000.0));
    }
    return res;
}

double rnddbl(double a, double b){
    std::random_device newgen123;
    std::mt19937 gener123(newgen123());
    std::uniform_real_distribution<double> ag(a, b);
    return ag(gener123);
}

std::vector<std::vector<double>> tpos(std::vector<std::vector<double>> mat){
    int r = mat.size();
    std::vector<std::vector<double>> res;
    res.resize(r);
    for(int i = 0; i<r; i++){
        res[i].resize(r);
        for(int j = 0; j<r; j++){
            res[i][j] = mat[j][i];
        }
    }
    return res;
}

std::vector<std::vector<double>> inv(std::vector<std::vector<double>> mat){
    std::vector<std::vector<double>> res;
    int n = mat.size();
    res.resize(n);
    for(int i = 0; i<n; i++){
        res[i].resize(n);
    }
    double de = det(mat);
    for(int i = 0; i<n; i++){
        for(int j = 0; j<n; j++){
            res[i][j] = pow(-1.0, i+j)*det(remRC(mat, i,j));
            res[i][j] /= de;
        }
    }
    return tpos(res);
}

double det(std::vector<std::vector<double>> mat){
int n = mat.size();
if(n==1){
    return mat[0][0];
}else{
    double sum = 0.0;
    for(int i = 0; i<n; i++){
        sum += pow(-1.0, i)*mat[0][i]*det(remRC(mat, 0, i));
    }
    return sum;
}
}

std::vector<std::vector<double>> remRC(std::vector<std::vector<double>> mat, int row, int col){
    int r = mat.size();
    int c = mat[0].size();
    std::vector<std::vector<double>> res;
    res.resize(r-1);
    for(int i = 0; i < r-1; i++){
        res[i].resize(c-1);
        for(int j = 0; j < c-1; j++){
            if (i < row && j < col) {
                res[i][j] = mat[i][j];
            }
            else if (i < row && j >= col) {
                res[i][j] = mat[i][j + 1];
            }
            else if (i >= row && j < col) {
                res[i][j] = mat[i + 1][j];
            }
            else {
                res[i][j] = mat[i + 1][j + 1];
            }
        }
    }
    return res;
}

void printMatrix(std::vector<std::vector<double>> a){
    int rows = a.size();
    int cols = a[0].size();
    for(int i = 0; i<rows; i++){
        for(int j = 0; j<cols; j++){
            print(a[i][j]);
            for(int k = 0; k<20-std::to_string(a[i][j]).size(); k++){
                print(" ");
            }
        }
        ln();
    }
}

void print(std::vector<double> a){
    printMatrix(a);
}

void print(std::vector<std::vector<double>> a){
    printMatrix(a);
}

void print(double a){
    print(std::to_string(a));
}

void println(double a){
    println(std::to_string(a));
}

void print(std::string str){
    std::cout<<str<<std::ends;
}

void ln(){
    std::cout<<std::endl;
}

void ln(int n){
    for(int i = 0; i<n ; i++){
        ln();
    }
}

void println(std::string str){
    print(str);
    ln();
}

std::vector<std::vector<double>> multiplyMatrices(std::vector<std::vector<double>> a, std::vector<std::vector<double>> b){
    int aRows = a.size();
    int aCols = a[0].size();
    int bCols = b[0].size();
    std::vector<std::vector<double>> result;
    result.resize(aRows);
    for(int i = 0; i<aRows; i++){
        result[i].resize(bCols);
    }
    double tempSum = 0.0;
    for(int i= 0; i<aRows; i++){
        for(int j = 0; j<bCols; j++){
            tempSum = 0.0;
            for(int k = 0; k<aCols; k++){
                tempSum += 1.0*a[i][k]*b[k][j];
            }
            result[i][j] = tempSum;
        }
    }
    return result;
}

std::vector<std::vector<double>> randomMatrix(int all){
    return randomMatrix(all, all);
}

std::vector<std::vector<double>> randomMatrix(int rows, int cols){
    std::random_device newgen;
    std::mt19937 gener(newgen());
    std::uniform_real_distribution<double> ag(-100.0, 100.0);

    std::vector<std::vector<double>> result;
    result.resize(rows);
    for(int i = 0; i<rows; i++){
        result[i].resize(cols);
        for(int j = 0; j<cols; j++){
            result[i][j] = ag(gener);
        }
    }
    return result;
}
